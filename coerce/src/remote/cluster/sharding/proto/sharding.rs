// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `sharding.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct AllocateShard {
    // message fields
    pub shard_id: u32,
    pub rebalancing: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AllocateShard {
    fn default() -> &'a AllocateShard {
        <AllocateShard as ::protobuf::Message>::default_instance()
    }
}

impl AllocateShard {
    pub fn new() -> AllocateShard {
        ::std::default::Default::default()
    }

    // uint32 shard_id = 1;


    pub fn get_shard_id(&self) -> u32 {
        self.shard_id
    }
    pub fn clear_shard_id(&mut self) {
        self.shard_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_shard_id(&mut self, v: u32) {
        self.shard_id = v;
    }

    // bool rebalancing = 2;


    pub fn get_rebalancing(&self) -> bool {
        self.rebalancing
    }
    pub fn clear_rebalancing(&mut self) {
        self.rebalancing = false;
    }

    // Param is passed by value, moved
    pub fn set_rebalancing(&mut self, v: bool) {
        self.rebalancing = v;
    }
}

impl ::protobuf::Message for AllocateShard {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.shard_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.rebalancing = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.shard_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.shard_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rebalancing != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.shard_id != 0 {
            os.write_uint32(1, self.shard_id)?;
        }
        if self.rebalancing != false {
            os.write_bool(2, self.rebalancing)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AllocateShard {
        AllocateShard::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "shard_id",
                |m: &AllocateShard| { &m.shard_id },
                |m: &mut AllocateShard| { &mut m.shard_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "rebalancing",
                |m: &AllocateShard| { &m.rebalancing },
                |m: &mut AllocateShard| { &mut m.rebalancing },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AllocateShard>(
                "AllocateShard",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AllocateShard {
        static instance: ::protobuf::rt::LazyV2<AllocateShard> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AllocateShard::new)
    }
}

impl ::protobuf::Clear for AllocateShard {
    fn clear(&mut self) {
        self.shard_id = 0;
        self.rebalancing = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AllocateShard {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AllocateShard {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RemoteShard {
    // message fields
    pub shard_id: u32,
    pub node_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RemoteShard {
    fn default() -> &'a RemoteShard {
        <RemoteShard as ::protobuf::Message>::default_instance()
    }
}

impl RemoteShard {
    pub fn new() -> RemoteShard {
        ::std::default::Default::default()
    }

    // uint32 shard_id = 1;


    pub fn get_shard_id(&self) -> u32 {
        self.shard_id
    }
    pub fn clear_shard_id(&mut self) {
        self.shard_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_shard_id(&mut self, v: u32) {
        self.shard_id = v;
    }

    // uint64 node_id = 2;


    pub fn get_node_id(&self) -> u64 {
        self.node_id
    }
    pub fn clear_node_id(&mut self) {
        self.node_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_node_id(&mut self, v: u64) {
        self.node_id = v;
    }
}

impl ::protobuf::Message for RemoteShard {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.shard_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.node_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.shard_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.shard_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.node_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.node_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.shard_id != 0 {
            os.write_uint32(1, self.shard_id)?;
        }
        if self.node_id != 0 {
            os.write_uint64(2, self.node_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RemoteShard {
        RemoteShard::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "shard_id",
                |m: &RemoteShard| { &m.shard_id },
                |m: &mut RemoteShard| { &mut m.shard_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "node_id",
                |m: &RemoteShard| { &m.node_id },
                |m: &mut RemoteShard| { &mut m.node_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RemoteShard>(
                "RemoteShard",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RemoteShard {
        static instance: ::protobuf::rt::LazyV2<RemoteShard> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RemoteShard::new)
    }
}

impl ::protobuf::Clear for RemoteShard {
    fn clear(&mut self) {
        self.shard_id = 0;
        self.node_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RemoteShard {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RemoteShard {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ShardAllocated {
    // message fields
    pub shard: ::protobuf::SingularPtrField<RemoteShard>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ShardAllocated {
    fn default() -> &'a ShardAllocated {
        <ShardAllocated as ::protobuf::Message>::default_instance()
    }
}

impl ShardAllocated {
    pub fn new() -> ShardAllocated {
        ::std::default::Default::default()
    }

    // .coerce.sharding.RemoteShard shard = 1;


    pub fn get_shard(&self) -> &RemoteShard {
        self.shard.as_ref().unwrap_or_else(|| <RemoteShard as ::protobuf::Message>::default_instance())
    }
    pub fn clear_shard(&mut self) {
        self.shard.clear();
    }

    pub fn has_shard(&self) -> bool {
        self.shard.is_some()
    }

    // Param is passed by value, moved
    pub fn set_shard(&mut self, v: RemoteShard) {
        self.shard = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_shard(&mut self) -> &mut RemoteShard {
        if self.shard.is_none() {
            self.shard.set_default();
        }
        self.shard.as_mut().unwrap()
    }

    // Take field
    pub fn take_shard(&mut self) -> RemoteShard {
        self.shard.take().unwrap_or_else(|| RemoteShard::new())
    }
}

impl ::protobuf::Message for ShardAllocated {
    fn is_initialized(&self) -> bool {
        for v in &self.shard {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.shard)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.shard.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.shard.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ShardAllocated {
        ShardAllocated::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RemoteShard>>(
                "shard",
                |m: &ShardAllocated| { &m.shard },
                |m: &mut ShardAllocated| { &mut m.shard },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ShardAllocated>(
                "ShardAllocated",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ShardAllocated {
        static instance: ::protobuf::rt::LazyV2<ShardAllocated> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ShardAllocated::new)
    }
}

impl ::protobuf::Clear for ShardAllocated {
    fn clear(&mut self) {
        self.shard.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ShardAllocated {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ShardAllocated {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ShardReallocating {
    // message fields
    pub shard_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ShardReallocating {
    fn default() -> &'a ShardReallocating {
        <ShardReallocating as ::protobuf::Message>::default_instance()
    }
}

impl ShardReallocating {
    pub fn new() -> ShardReallocating {
        ::std::default::Default::default()
    }

    // uint32 shard_id = 1;


    pub fn get_shard_id(&self) -> u32 {
        self.shard_id
    }
    pub fn clear_shard_id(&mut self) {
        self.shard_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_shard_id(&mut self, v: u32) {
        self.shard_id = v;
    }
}

impl ::protobuf::Message for ShardReallocating {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.shard_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.shard_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.shard_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.shard_id != 0 {
            os.write_uint32(1, self.shard_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ShardReallocating {
        ShardReallocating::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "shard_id",
                |m: &ShardReallocating| { &m.shard_id },
                |m: &mut ShardReallocating| { &mut m.shard_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ShardReallocating>(
                "ShardReallocating",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ShardReallocating {
        static instance: ::protobuf::rt::LazyV2<ShardReallocating> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ShardReallocating::new)
    }
}

impl ::protobuf::Clear for ShardReallocating {
    fn clear(&mut self) {
        self.shard_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ShardReallocating {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ShardReallocating {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StopShard {
    // message fields
    pub shard_id: u32,
    pub origin_node_id: u64,
    pub request_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StopShard {
    fn default() -> &'a StopShard {
        <StopShard as ::protobuf::Message>::default_instance()
    }
}

impl StopShard {
    pub fn new() -> StopShard {
        ::std::default::Default::default()
    }

    // uint32 shard_id = 1;


    pub fn get_shard_id(&self) -> u32 {
        self.shard_id
    }
    pub fn clear_shard_id(&mut self) {
        self.shard_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_shard_id(&mut self, v: u32) {
        self.shard_id = v;
    }

    // uint64 origin_node_id = 2;


    pub fn get_origin_node_id(&self) -> u64 {
        self.origin_node_id
    }
    pub fn clear_origin_node_id(&mut self) {
        self.origin_node_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_origin_node_id(&mut self, v: u64) {
        self.origin_node_id = v;
    }

    // string request_id = 3;


    pub fn get_request_id(&self) -> &str {
        &self.request_id
    }
    pub fn clear_request_id(&mut self) {
        self.request_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_request_id(&mut self, v: ::std::string::String) {
        self.request_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_id(&mut self) -> &mut ::std::string::String {
        &mut self.request_id
    }

    // Take field
    pub fn take_request_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.request_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for StopShard {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.shard_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.origin_node_id = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.request_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.shard_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.shard_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.origin_node_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.origin_node_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.request_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.request_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.shard_id != 0 {
            os.write_uint32(1, self.shard_id)?;
        }
        if self.origin_node_id != 0 {
            os.write_uint64(2, self.origin_node_id)?;
        }
        if !self.request_id.is_empty() {
            os.write_string(3, &self.request_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StopShard {
        StopShard::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "shard_id",
                |m: &StopShard| { &m.shard_id },
                |m: &mut StopShard| { &mut m.shard_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "origin_node_id",
                |m: &StopShard| { &m.origin_node_id },
                |m: &mut StopShard| { &mut m.origin_node_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "request_id",
                |m: &StopShard| { &m.request_id },
                |m: &mut StopShard| { &mut m.request_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StopShard>(
                "StopShard",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StopShard {
        static instance: ::protobuf::rt::LazyV2<StopShard> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StopShard::new)
    }
}

impl ::protobuf::Clear for StopShard {
    fn clear(&mut self) {
        self.shard_id = 0;
        self.origin_node_id = 0;
        self.request_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StopShard {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StopShard {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ShardStopped {
    // message fields
    pub shard_id: u32,
    pub origin_node_id: u64,
    pub is_successful: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ShardStopped {
    fn default() -> &'a ShardStopped {
        <ShardStopped as ::protobuf::Message>::default_instance()
    }
}

impl ShardStopped {
    pub fn new() -> ShardStopped {
        ::std::default::Default::default()
    }

    // uint32 shard_id = 1;


    pub fn get_shard_id(&self) -> u32 {
        self.shard_id
    }
    pub fn clear_shard_id(&mut self) {
        self.shard_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_shard_id(&mut self, v: u32) {
        self.shard_id = v;
    }

    // uint64 origin_node_id = 2;


    pub fn get_origin_node_id(&self) -> u64 {
        self.origin_node_id
    }
    pub fn clear_origin_node_id(&mut self) {
        self.origin_node_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_origin_node_id(&mut self, v: u64) {
        self.origin_node_id = v;
    }

    // bool is_successful = 3;


    pub fn get_is_successful(&self) -> bool {
        self.is_successful
    }
    pub fn clear_is_successful(&mut self) {
        self.is_successful = false;
    }

    // Param is passed by value, moved
    pub fn set_is_successful(&mut self, v: bool) {
        self.is_successful = v;
    }
}

impl ::protobuf::Message for ShardStopped {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.shard_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.origin_node_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_successful = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.shard_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.shard_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.origin_node_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.origin_node_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.is_successful != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.shard_id != 0 {
            os.write_uint32(1, self.shard_id)?;
        }
        if self.origin_node_id != 0 {
            os.write_uint64(2, self.origin_node_id)?;
        }
        if self.is_successful != false {
            os.write_bool(3, self.is_successful)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ShardStopped {
        ShardStopped::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "shard_id",
                |m: &ShardStopped| { &m.shard_id },
                |m: &mut ShardStopped| { &mut m.shard_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "origin_node_id",
                |m: &ShardStopped| { &m.origin_node_id },
                |m: &mut ShardStopped| { &mut m.origin_node_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "is_successful",
                |m: &ShardStopped| { &m.is_successful },
                |m: &mut ShardStopped| { &mut m.is_successful },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ShardStopped>(
                "ShardStopped",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ShardStopped {
        static instance: ::protobuf::rt::LazyV2<ShardStopped> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ShardStopped::new)
    }
}

impl ::protobuf::Clear for ShardStopped {
    fn clear(&mut self) {
        self.shard_id = 0;
        self.origin_node_id = 0;
        self.is_successful = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ShardStopped {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ShardStopped {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AllocateShardResult {
    // message fields
    pub result_type: AllocateShardResult_Type,
    pub allocation: ::protobuf::SingularPtrField<RemoteShard>,
    pub err: AllocateShardResult_AllocateShardErr,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AllocateShardResult {
    fn default() -> &'a AllocateShardResult {
        <AllocateShardResult as ::protobuf::Message>::default_instance()
    }
}

impl AllocateShardResult {
    pub fn new() -> AllocateShardResult {
        ::std::default::Default::default()
    }

    // .coerce.sharding.AllocateShardResult.Type result_type = 1;


    pub fn get_result_type(&self) -> AllocateShardResult_Type {
        self.result_type
    }
    pub fn clear_result_type(&mut self) {
        self.result_type = AllocateShardResult_Type::ALLOCATED;
    }

    // Param is passed by value, moved
    pub fn set_result_type(&mut self, v: AllocateShardResult_Type) {
        self.result_type = v;
    }

    // .coerce.sharding.RemoteShard allocation = 2;


    pub fn get_allocation(&self) -> &RemoteShard {
        self.allocation.as_ref().unwrap_or_else(|| <RemoteShard as ::protobuf::Message>::default_instance())
    }
    pub fn clear_allocation(&mut self) {
        self.allocation.clear();
    }

    pub fn has_allocation(&self) -> bool {
        self.allocation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_allocation(&mut self, v: RemoteShard) {
        self.allocation = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_allocation(&mut self) -> &mut RemoteShard {
        if self.allocation.is_none() {
            self.allocation.set_default();
        }
        self.allocation.as_mut().unwrap()
    }

    // Take field
    pub fn take_allocation(&mut self) -> RemoteShard {
        self.allocation.take().unwrap_or_else(|| RemoteShard::new())
    }

    // .coerce.sharding.AllocateShardResult.AllocateShardErr err = 3;


    pub fn get_err(&self) -> AllocateShardResult_AllocateShardErr {
        self.err
    }
    pub fn clear_err(&mut self) {
        self.err = AllocateShardResult_AllocateShardErr::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_err(&mut self, v: AllocateShardResult_AllocateShardErr) {
        self.err = v;
    }
}

impl ::protobuf::Message for AllocateShardResult {
    fn is_initialized(&self) -> bool {
        for v in &self.allocation {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.result_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.allocation)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.err, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.result_type != AllocateShardResult_Type::ALLOCATED {
            my_size += ::protobuf::rt::enum_size(1, self.result_type);
        }
        if let Some(ref v) = self.allocation.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.err != AllocateShardResult_AllocateShardErr::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(3, self.err);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.result_type != AllocateShardResult_Type::ALLOCATED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.result_type))?;
        }
        if let Some(ref v) = self.allocation.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.err != AllocateShardResult_AllocateShardErr::UNKNOWN {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.err))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AllocateShardResult {
        AllocateShardResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<AllocateShardResult_Type>>(
                "result_type",
                |m: &AllocateShardResult| { &m.result_type },
                |m: &mut AllocateShardResult| { &mut m.result_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RemoteShard>>(
                "allocation",
                |m: &AllocateShardResult| { &m.allocation },
                |m: &mut AllocateShardResult| { &mut m.allocation },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<AllocateShardResult_AllocateShardErr>>(
                "err",
                |m: &AllocateShardResult| { &m.err },
                |m: &mut AllocateShardResult| { &mut m.err },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AllocateShardResult>(
                "AllocateShardResult",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AllocateShardResult {
        static instance: ::protobuf::rt::LazyV2<AllocateShardResult> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AllocateShardResult::new)
    }
}

impl ::protobuf::Clear for AllocateShardResult {
    fn clear(&mut self) {
        self.result_type = AllocateShardResult_Type::ALLOCATED;
        self.allocation.clear();
        self.err = AllocateShardResult_AllocateShardErr::UNKNOWN;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AllocateShardResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AllocateShardResult {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum AllocateShardResult_Type {
    ALLOCATED = 0,
    ALREADY_ALLOCATED = 1,
    NOT_ALLOCATED = 2,
    ERR = 3,
}

impl ::protobuf::ProtobufEnum for AllocateShardResult_Type {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<AllocateShardResult_Type> {
        match value {
            0 => ::std::option::Option::Some(AllocateShardResult_Type::ALLOCATED),
            1 => ::std::option::Option::Some(AllocateShardResult_Type::ALREADY_ALLOCATED),
            2 => ::std::option::Option::Some(AllocateShardResult_Type::NOT_ALLOCATED),
            3 => ::std::option::Option::Some(AllocateShardResult_Type::ERR),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [AllocateShardResult_Type] = &[
            AllocateShardResult_Type::ALLOCATED,
            AllocateShardResult_Type::ALREADY_ALLOCATED,
            AllocateShardResult_Type::NOT_ALLOCATED,
            AllocateShardResult_Type::ERR,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<AllocateShardResult_Type>("AllocateShardResult.Type", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for AllocateShardResult_Type {
}

impl ::std::default::Default for AllocateShardResult_Type {
    fn default() -> Self {
        AllocateShardResult_Type::ALLOCATED
    }
}

impl ::protobuf::reflect::ProtobufValue for AllocateShardResult_Type {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum AllocateShardResult_AllocateShardErr {
    UNKNOWN = 0,
    PERSISTENCE = 1,
}

impl ::protobuf::ProtobufEnum for AllocateShardResult_AllocateShardErr {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<AllocateShardResult_AllocateShardErr> {
        match value {
            0 => ::std::option::Option::Some(AllocateShardResult_AllocateShardErr::UNKNOWN),
            1 => ::std::option::Option::Some(AllocateShardResult_AllocateShardErr::PERSISTENCE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [AllocateShardResult_AllocateShardErr] = &[
            AllocateShardResult_AllocateShardErr::UNKNOWN,
            AllocateShardResult_AllocateShardErr::PERSISTENCE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<AllocateShardResult_AllocateShardErr>("AllocateShardResult.AllocateShardErr", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for AllocateShardResult_AllocateShardErr {
}

impl ::std::default::Default for AllocateShardResult_AllocateShardErr {
    fn default() -> Self {
        AllocateShardResult_AllocateShardErr::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for AllocateShardResult_AllocateShardErr {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RemoteEntityRequest {
    // message fields
    pub request_id: ::std::string::String,
    pub actor_id: ::std::string::String,
    pub message_type: ::std::string::String,
    pub message: ::std::vec::Vec<u8>,
    pub recipe: ::protobuf::SingularPtrField<RemoteEntityRequest_Recipe>,
    pub origin_node: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RemoteEntityRequest {
    fn default() -> &'a RemoteEntityRequest {
        <RemoteEntityRequest as ::protobuf::Message>::default_instance()
    }
}

impl RemoteEntityRequest {
    pub fn new() -> RemoteEntityRequest {
        ::std::default::Default::default()
    }

    // string request_id = 1;


    pub fn get_request_id(&self) -> &str {
        &self.request_id
    }
    pub fn clear_request_id(&mut self) {
        self.request_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_request_id(&mut self, v: ::std::string::String) {
        self.request_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_id(&mut self) -> &mut ::std::string::String {
        &mut self.request_id
    }

    // Take field
    pub fn take_request_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.request_id, ::std::string::String::new())
    }

    // string actor_id = 2;


    pub fn get_actor_id(&self) -> &str {
        &self.actor_id
    }
    pub fn clear_actor_id(&mut self) {
        self.actor_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_actor_id(&mut self, v: ::std::string::String) {
        self.actor_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_actor_id(&mut self) -> &mut ::std::string::String {
        &mut self.actor_id
    }

    // Take field
    pub fn take_actor_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.actor_id, ::std::string::String::new())
    }

    // string message_type = 3;


    pub fn get_message_type(&self) -> &str {
        &self.message_type
    }
    pub fn clear_message_type(&mut self) {
        self.message_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_message_type(&mut self, v: ::std::string::String) {
        self.message_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message_type(&mut self) -> &mut ::std::string::String {
        &mut self.message_type
    }

    // Take field
    pub fn take_message_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message_type, ::std::string::String::new())
    }

    // bytes message = 4;


    pub fn get_message(&self) -> &[u8] {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::vec::Vec<u8>) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.message, ::std::vec::Vec::new())
    }

    // .coerce.sharding.RemoteEntityRequest.Recipe recipe = 5;


    pub fn get_recipe(&self) -> &RemoteEntityRequest_Recipe {
        self.recipe.as_ref().unwrap_or_else(|| <RemoteEntityRequest_Recipe as ::protobuf::Message>::default_instance())
    }
    pub fn clear_recipe(&mut self) {
        self.recipe.clear();
    }

    pub fn has_recipe(&self) -> bool {
        self.recipe.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recipe(&mut self, v: RemoteEntityRequest_Recipe) {
        self.recipe = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recipe(&mut self) -> &mut RemoteEntityRequest_Recipe {
        if self.recipe.is_none() {
            self.recipe.set_default();
        }
        self.recipe.as_mut().unwrap()
    }

    // Take field
    pub fn take_recipe(&mut self) -> RemoteEntityRequest_Recipe {
        self.recipe.take().unwrap_or_else(|| RemoteEntityRequest_Recipe::new())
    }

    // uint64 origin_node = 6;


    pub fn get_origin_node(&self) -> u64 {
        self.origin_node
    }
    pub fn clear_origin_node(&mut self) {
        self.origin_node = 0;
    }

    // Param is passed by value, moved
    pub fn set_origin_node(&mut self, v: u64) {
        self.origin_node = v;
    }
}

impl ::protobuf::Message for RemoteEntityRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.recipe {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.request_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.actor_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message_type)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.message)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.recipe)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.origin_node = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.request_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.request_id);
        }
        if !self.actor_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.actor_id);
        }
        if !self.message_type.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.message_type);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.message);
        }
        if let Some(ref v) = self.recipe.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.origin_node != 0 {
            my_size += ::protobuf::rt::value_size(6, self.origin_node, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.request_id.is_empty() {
            os.write_string(1, &self.request_id)?;
        }
        if !self.actor_id.is_empty() {
            os.write_string(2, &self.actor_id)?;
        }
        if !self.message_type.is_empty() {
            os.write_string(3, &self.message_type)?;
        }
        if !self.message.is_empty() {
            os.write_bytes(4, &self.message)?;
        }
        if let Some(ref v) = self.recipe.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.origin_node != 0 {
            os.write_uint64(6, self.origin_node)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RemoteEntityRequest {
        RemoteEntityRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "request_id",
                |m: &RemoteEntityRequest| { &m.request_id },
                |m: &mut RemoteEntityRequest| { &mut m.request_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "actor_id",
                |m: &RemoteEntityRequest| { &m.actor_id },
                |m: &mut RemoteEntityRequest| { &mut m.actor_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message_type",
                |m: &RemoteEntityRequest| { &m.message_type },
                |m: &mut RemoteEntityRequest| { &mut m.message_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "message",
                |m: &RemoteEntityRequest| { &m.message },
                |m: &mut RemoteEntityRequest| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RemoteEntityRequest_Recipe>>(
                "recipe",
                |m: &RemoteEntityRequest| { &m.recipe },
                |m: &mut RemoteEntityRequest| { &mut m.recipe },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "origin_node",
                |m: &RemoteEntityRequest| { &m.origin_node },
                |m: &mut RemoteEntityRequest| { &mut m.origin_node },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RemoteEntityRequest>(
                "RemoteEntityRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RemoteEntityRequest {
        static instance: ::protobuf::rt::LazyV2<RemoteEntityRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RemoteEntityRequest::new)
    }
}

impl ::protobuf::Clear for RemoteEntityRequest {
    fn clear(&mut self) {
        self.request_id.clear();
        self.actor_id.clear();
        self.message_type.clear();
        self.message.clear();
        self.recipe.clear();
        self.origin_node = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RemoteEntityRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RemoteEntityRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RemoteEntityRequest_Recipe {
    // message fields
    pub recipe: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RemoteEntityRequest_Recipe {
    fn default() -> &'a RemoteEntityRequest_Recipe {
        <RemoteEntityRequest_Recipe as ::protobuf::Message>::default_instance()
    }
}

impl RemoteEntityRequest_Recipe {
    pub fn new() -> RemoteEntityRequest_Recipe {
        ::std::default::Default::default()
    }

    // bytes recipe = 1;


    pub fn get_recipe(&self) -> &[u8] {
        &self.recipe
    }
    pub fn clear_recipe(&mut self) {
        self.recipe.clear();
    }

    // Param is passed by value, moved
    pub fn set_recipe(&mut self, v: ::std::vec::Vec<u8>) {
        self.recipe = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recipe(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.recipe
    }

    // Take field
    pub fn take_recipe(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.recipe, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for RemoteEntityRequest_Recipe {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.recipe)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.recipe.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.recipe);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.recipe.is_empty() {
            os.write_bytes(1, &self.recipe)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RemoteEntityRequest_Recipe {
        RemoteEntityRequest_Recipe::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "recipe",
                |m: &RemoteEntityRequest_Recipe| { &m.recipe },
                |m: &mut RemoteEntityRequest_Recipe| { &mut m.recipe },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RemoteEntityRequest_Recipe>(
                "RemoteEntityRequest.Recipe",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RemoteEntityRequest_Recipe {
        static instance: ::protobuf::rt::LazyV2<RemoteEntityRequest_Recipe> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RemoteEntityRequest_Recipe::new)
    }
}

impl ::protobuf::Clear for RemoteEntityRequest_Recipe {
    fn clear(&mut self) {
        self.recipe.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RemoteEntityRequest_Recipe {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RemoteEntityRequest_Recipe {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StartEntity {
    // message fields
    pub actor_id: ::std::string::String,
    pub recipe: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StartEntity {
    fn default() -> &'a StartEntity {
        <StartEntity as ::protobuf::Message>::default_instance()
    }
}

impl StartEntity {
    pub fn new() -> StartEntity {
        ::std::default::Default::default()
    }

    // string actor_id = 1;


    pub fn get_actor_id(&self) -> &str {
        &self.actor_id
    }
    pub fn clear_actor_id(&mut self) {
        self.actor_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_actor_id(&mut self, v: ::std::string::String) {
        self.actor_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_actor_id(&mut self) -> &mut ::std::string::String {
        &mut self.actor_id
    }

    // Take field
    pub fn take_actor_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.actor_id, ::std::string::String::new())
    }

    // bytes recipe = 2;


    pub fn get_recipe(&self) -> &[u8] {
        &self.recipe
    }
    pub fn clear_recipe(&mut self) {
        self.recipe.clear();
    }

    // Param is passed by value, moved
    pub fn set_recipe(&mut self, v: ::std::vec::Vec<u8>) {
        self.recipe = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recipe(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.recipe
    }

    // Take field
    pub fn take_recipe(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.recipe, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for StartEntity {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.actor_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.recipe)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.actor_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.actor_id);
        }
        if !self.recipe.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.recipe);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.actor_id.is_empty() {
            os.write_string(1, &self.actor_id)?;
        }
        if !self.recipe.is_empty() {
            os.write_bytes(2, &self.recipe)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StartEntity {
        StartEntity::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "actor_id",
                |m: &StartEntity| { &m.actor_id },
                |m: &mut StartEntity| { &mut m.actor_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "recipe",
                |m: &StartEntity| { &m.recipe },
                |m: &mut StartEntity| { &mut m.recipe },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StartEntity>(
                "StartEntity",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StartEntity {
        static instance: ::protobuf::rt::LazyV2<StartEntity> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StartEntity::new)
    }
}

impl ::protobuf::Clear for StartEntity {
    fn clear(&mut self) {
        self.actor_id.clear();
        self.recipe.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StartEntity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StartEntity {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PassivateEntity {
    // message fields
    pub actor_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PassivateEntity {
    fn default() -> &'a PassivateEntity {
        <PassivateEntity as ::protobuf::Message>::default_instance()
    }
}

impl PassivateEntity {
    pub fn new() -> PassivateEntity {
        ::std::default::Default::default()
    }

    // string actor_id = 1;


    pub fn get_actor_id(&self) -> &str {
        &self.actor_id
    }
    pub fn clear_actor_id(&mut self) {
        self.actor_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_actor_id(&mut self, v: ::std::string::String) {
        self.actor_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_actor_id(&mut self) -> &mut ::std::string::String {
        &mut self.actor_id
    }

    // Take field
    pub fn take_actor_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.actor_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for PassivateEntity {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.actor_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.actor_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.actor_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.actor_id.is_empty() {
            os.write_string(1, &self.actor_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PassivateEntity {
        PassivateEntity::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "actor_id",
                |m: &PassivateEntity| { &m.actor_id },
                |m: &mut PassivateEntity| { &mut m.actor_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PassivateEntity>(
                "PassivateEntity",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PassivateEntity {
        static instance: ::protobuf::rt::LazyV2<PassivateEntity> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PassivateEntity::new)
    }
}

impl ::protobuf::Clear for PassivateEntity {
    fn clear(&mut self) {
        self.actor_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PassivateEntity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PassivateEntity {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RemoveEntity {
    // message fields
    pub actor_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RemoveEntity {
    fn default() -> &'a RemoveEntity {
        <RemoveEntity as ::protobuf::Message>::default_instance()
    }
}

impl RemoveEntity {
    pub fn new() -> RemoveEntity {
        ::std::default::Default::default()
    }

    // string actor_id = 1;


    pub fn get_actor_id(&self) -> &str {
        &self.actor_id
    }
    pub fn clear_actor_id(&mut self) {
        self.actor_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_actor_id(&mut self, v: ::std::string::String) {
        self.actor_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_actor_id(&mut self) -> &mut ::std::string::String {
        &mut self.actor_id
    }

    // Take field
    pub fn take_actor_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.actor_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RemoveEntity {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.actor_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.actor_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.actor_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.actor_id.is_empty() {
            os.write_string(1, &self.actor_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RemoveEntity {
        RemoveEntity::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "actor_id",
                |m: &RemoveEntity| { &m.actor_id },
                |m: &mut RemoveEntity| { &mut m.actor_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RemoveEntity>(
                "RemoveEntity",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RemoveEntity {
        static instance: ::protobuf::rt::LazyV2<RemoveEntity> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RemoveEntity::new)
    }
}

impl ::protobuf::Clear for RemoveEntity {
    fn clear(&mut self) {
        self.actor_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RemoveEntity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RemoveEntity {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ShardStateSnapshot {
    // message fields
    pub shard_id: u32,
    pub node_id: u64,
    pub entities: ::protobuf::RepeatedField<ShardStateSnapshot_Entity>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ShardStateSnapshot {
    fn default() -> &'a ShardStateSnapshot {
        <ShardStateSnapshot as ::protobuf::Message>::default_instance()
    }
}

impl ShardStateSnapshot {
    pub fn new() -> ShardStateSnapshot {
        ::std::default::Default::default()
    }

    // uint32 shard_id = 1;


    pub fn get_shard_id(&self) -> u32 {
        self.shard_id
    }
    pub fn clear_shard_id(&mut self) {
        self.shard_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_shard_id(&mut self, v: u32) {
        self.shard_id = v;
    }

    // uint64 node_id = 2;


    pub fn get_node_id(&self) -> u64 {
        self.node_id
    }
    pub fn clear_node_id(&mut self) {
        self.node_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_node_id(&mut self, v: u64) {
        self.node_id = v;
    }

    // repeated .coerce.sharding.ShardStateSnapshot.Entity entities = 3;


    pub fn get_entities(&self) -> &[ShardStateSnapshot_Entity] {
        &self.entities
    }
    pub fn clear_entities(&mut self) {
        self.entities.clear();
    }

    // Param is passed by value, moved
    pub fn set_entities(&mut self, v: ::protobuf::RepeatedField<ShardStateSnapshot_Entity>) {
        self.entities = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entities(&mut self) -> &mut ::protobuf::RepeatedField<ShardStateSnapshot_Entity> {
        &mut self.entities
    }

    // Take field
    pub fn take_entities(&mut self) -> ::protobuf::RepeatedField<ShardStateSnapshot_Entity> {
        ::std::mem::replace(&mut self.entities, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ShardStateSnapshot {
    fn is_initialized(&self) -> bool {
        for v in &self.entities {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.shard_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.node_id = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entities)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.shard_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.shard_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.node_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.node_id, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.entities {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.shard_id != 0 {
            os.write_uint32(1, self.shard_id)?;
        }
        if self.node_id != 0 {
            os.write_uint64(2, self.node_id)?;
        }
        for v in &self.entities {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ShardStateSnapshot {
        ShardStateSnapshot::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "shard_id",
                |m: &ShardStateSnapshot| { &m.shard_id },
                |m: &mut ShardStateSnapshot| { &mut m.shard_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "node_id",
                |m: &ShardStateSnapshot| { &m.node_id },
                |m: &mut ShardStateSnapshot| { &mut m.node_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ShardStateSnapshot_Entity>>(
                "entities",
                |m: &ShardStateSnapshot| { &m.entities },
                |m: &mut ShardStateSnapshot| { &mut m.entities },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ShardStateSnapshot>(
                "ShardStateSnapshot",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ShardStateSnapshot {
        static instance: ::protobuf::rt::LazyV2<ShardStateSnapshot> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ShardStateSnapshot::new)
    }
}

impl ::protobuf::Clear for ShardStateSnapshot {
    fn clear(&mut self) {
        self.shard_id = 0;
        self.node_id = 0;
        self.entities.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ShardStateSnapshot {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ShardStateSnapshot {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ShardStateSnapshot_Entity {
    // message fields
    pub actor_id: ::std::string::String,
    pub recipe: ::std::vec::Vec<u8>,
    pub state: EntityState,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ShardStateSnapshot_Entity {
    fn default() -> &'a ShardStateSnapshot_Entity {
        <ShardStateSnapshot_Entity as ::protobuf::Message>::default_instance()
    }
}

impl ShardStateSnapshot_Entity {
    pub fn new() -> ShardStateSnapshot_Entity {
        ::std::default::Default::default()
    }

    // string actor_id = 1;


    pub fn get_actor_id(&self) -> &str {
        &self.actor_id
    }
    pub fn clear_actor_id(&mut self) {
        self.actor_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_actor_id(&mut self, v: ::std::string::String) {
        self.actor_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_actor_id(&mut self) -> &mut ::std::string::String {
        &mut self.actor_id
    }

    // Take field
    pub fn take_actor_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.actor_id, ::std::string::String::new())
    }

    // bytes recipe = 2;


    pub fn get_recipe(&self) -> &[u8] {
        &self.recipe
    }
    pub fn clear_recipe(&mut self) {
        self.recipe.clear();
    }

    // Param is passed by value, moved
    pub fn set_recipe(&mut self, v: ::std::vec::Vec<u8>) {
        self.recipe = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recipe(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.recipe
    }

    // Take field
    pub fn take_recipe(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.recipe, ::std::vec::Vec::new())
    }

    // .coerce.sharding.EntityState state = 3;


    pub fn get_state(&self) -> EntityState {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = EntityState::IDLE;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: EntityState) {
        self.state = v;
    }
}

impl ::protobuf::Message for ShardStateSnapshot_Entity {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.actor_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.recipe)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.actor_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.actor_id);
        }
        if !self.recipe.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.recipe);
        }
        if self.state != EntityState::IDLE {
            my_size += ::protobuf::rt::enum_size(3, self.state);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.actor_id.is_empty() {
            os.write_string(1, &self.actor_id)?;
        }
        if !self.recipe.is_empty() {
            os.write_bytes(2, &self.recipe)?;
        }
        if self.state != EntityState::IDLE {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.state))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ShardStateSnapshot_Entity {
        ShardStateSnapshot_Entity::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "actor_id",
                |m: &ShardStateSnapshot_Entity| { &m.actor_id },
                |m: &mut ShardStateSnapshot_Entity| { &mut m.actor_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "recipe",
                |m: &ShardStateSnapshot_Entity| { &m.recipe },
                |m: &mut ShardStateSnapshot_Entity| { &mut m.recipe },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<EntityState>>(
                "state",
                |m: &ShardStateSnapshot_Entity| { &m.state },
                |m: &mut ShardStateSnapshot_Entity| { &mut m.state },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ShardStateSnapshot_Entity>(
                "ShardStateSnapshot.Entity",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ShardStateSnapshot_Entity {
        static instance: ::protobuf::rt::LazyV2<ShardStateSnapshot_Entity> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ShardStateSnapshot_Entity::new)
    }
}

impl ::protobuf::Clear for ShardStateSnapshot_Entity {
    fn clear(&mut self) {
        self.actor_id.clear();
        self.recipe.clear();
        self.state = EntityState::IDLE;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ShardStateSnapshot_Entity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ShardStateSnapshot_Entity {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetShardingStats {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetShardingStats {
    fn default() -> &'a GetShardingStats {
        <GetShardingStats as ::protobuf::Message>::default_instance()
    }
}

impl GetShardingStats {
    pub fn new() -> GetShardingStats {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetShardingStats {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetShardingStats {
        GetShardingStats::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetShardingStats>(
                "GetShardingStats",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetShardingStats {
        static instance: ::protobuf::rt::LazyV2<GetShardingStats> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetShardingStats::new)
    }
}

impl ::protobuf::Clear for GetShardingStats {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetShardingStats {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetShardingStats {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NodeStats {
    // message fields
    pub node_id: u64,
    pub shard_count: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NodeStats {
    fn default() -> &'a NodeStats {
        <NodeStats as ::protobuf::Message>::default_instance()
    }
}

impl NodeStats {
    pub fn new() -> NodeStats {
        ::std::default::Default::default()
    }

    // uint64 node_id = 1;


    pub fn get_node_id(&self) -> u64 {
        self.node_id
    }
    pub fn clear_node_id(&mut self) {
        self.node_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_node_id(&mut self, v: u64) {
        self.node_id = v;
    }

    // uint64 shard_count = 2;


    pub fn get_shard_count(&self) -> u64 {
        self.shard_count
    }
    pub fn clear_shard_count(&mut self) {
        self.shard_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_shard_count(&mut self, v: u64) {
        self.shard_count = v;
    }
}

impl ::protobuf::Message for NodeStats {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.node_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.shard_count = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.node_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.node_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.shard_count != 0 {
            my_size += ::protobuf::rt::value_size(2, self.shard_count, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.node_id != 0 {
            os.write_uint64(1, self.node_id)?;
        }
        if self.shard_count != 0 {
            os.write_uint64(2, self.shard_count)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NodeStats {
        NodeStats::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "node_id",
                |m: &NodeStats| { &m.node_id },
                |m: &mut NodeStats| { &mut m.node_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "shard_count",
                |m: &NodeStats| { &m.shard_count },
                |m: &mut NodeStats| { &mut m.shard_count },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<NodeStats>(
                "NodeStats",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static NodeStats {
        static instance: ::protobuf::rt::LazyV2<NodeStats> = ::protobuf::rt::LazyV2::INIT;
        instance.get(NodeStats::new)
    }
}

impl ::protobuf::Clear for NodeStats {
    fn clear(&mut self) {
        self.node_id = 0;
        self.shard_count = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NodeStats {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NodeStats {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ShardingStats {
    // message fields
    pub entity_type: ::std::string::String,
    pub total_shards: u64,
    pub shards: ::protobuf::RepeatedField<RemoteShard>,
    pub nodes: ::protobuf::RepeatedField<NodeStats>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ShardingStats {
    fn default() -> &'a ShardingStats {
        <ShardingStats as ::protobuf::Message>::default_instance()
    }
}

impl ShardingStats {
    pub fn new() -> ShardingStats {
        ::std::default::Default::default()
    }

    // string entity_type = 1;


    pub fn get_entity_type(&self) -> &str {
        &self.entity_type
    }
    pub fn clear_entity_type(&mut self) {
        self.entity_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_entity_type(&mut self, v: ::std::string::String) {
        self.entity_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_entity_type(&mut self) -> &mut ::std::string::String {
        &mut self.entity_type
    }

    // Take field
    pub fn take_entity_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.entity_type, ::std::string::String::new())
    }

    // uint64 total_shards = 2;


    pub fn get_total_shards(&self) -> u64 {
        self.total_shards
    }
    pub fn clear_total_shards(&mut self) {
        self.total_shards = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_shards(&mut self, v: u64) {
        self.total_shards = v;
    }

    // repeated .coerce.sharding.RemoteShard shards = 3;


    pub fn get_shards(&self) -> &[RemoteShard] {
        &self.shards
    }
    pub fn clear_shards(&mut self) {
        self.shards.clear();
    }

    // Param is passed by value, moved
    pub fn set_shards(&mut self, v: ::protobuf::RepeatedField<RemoteShard>) {
        self.shards = v;
    }

    // Mutable pointer to the field.
    pub fn mut_shards(&mut self) -> &mut ::protobuf::RepeatedField<RemoteShard> {
        &mut self.shards
    }

    // Take field
    pub fn take_shards(&mut self) -> ::protobuf::RepeatedField<RemoteShard> {
        ::std::mem::replace(&mut self.shards, ::protobuf::RepeatedField::new())
    }

    // repeated .coerce.sharding.NodeStats nodes = 4;


    pub fn get_nodes(&self) -> &[NodeStats] {
        &self.nodes
    }
    pub fn clear_nodes(&mut self) {
        self.nodes.clear();
    }

    // Param is passed by value, moved
    pub fn set_nodes(&mut self, v: ::protobuf::RepeatedField<NodeStats>) {
        self.nodes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_nodes(&mut self) -> &mut ::protobuf::RepeatedField<NodeStats> {
        &mut self.nodes
    }

    // Take field
    pub fn take_nodes(&mut self) -> ::protobuf::RepeatedField<NodeStats> {
        ::std::mem::replace(&mut self.nodes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ShardingStats {
    fn is_initialized(&self) -> bool {
        for v in &self.shards {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.nodes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.entity_type)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.total_shards = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.shards)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.nodes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.entity_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.entity_type);
        }
        if self.total_shards != 0 {
            my_size += ::protobuf::rt::value_size(2, self.total_shards, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.shards {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.nodes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.entity_type.is_empty() {
            os.write_string(1, &self.entity_type)?;
        }
        if self.total_shards != 0 {
            os.write_uint64(2, self.total_shards)?;
        }
        for v in &self.shards {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.nodes {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ShardingStats {
        ShardingStats::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "entity_type",
                |m: &ShardingStats| { &m.entity_type },
                |m: &mut ShardingStats| { &mut m.entity_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "total_shards",
                |m: &ShardingStats| { &m.total_shards },
                |m: &mut ShardingStats| { &mut m.total_shards },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RemoteShard>>(
                "shards",
                |m: &ShardingStats| { &m.shards },
                |m: &mut ShardingStats| { &mut m.shards },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<NodeStats>>(
                "nodes",
                |m: &ShardingStats| { &m.nodes },
                |m: &mut ShardingStats| { &mut m.nodes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ShardingStats>(
                "ShardingStats",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ShardingStats {
        static instance: ::protobuf::rt::LazyV2<ShardingStats> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ShardingStats::new)
    }
}

impl ::protobuf::Clear for ShardingStats {
    fn clear(&mut self) {
        self.entity_type.clear();
        self.total_shards = 0;
        self.shards.clear();
        self.nodes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ShardingStats {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ShardingStats {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetShardStats {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetShardStats {
    fn default() -> &'a GetShardStats {
        <GetShardStats as ::protobuf::Message>::default_instance()
    }
}

impl GetShardStats {
    pub fn new() -> GetShardStats {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetShardStats {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetShardStats {
        GetShardStats::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetShardStats>(
                "GetShardStats",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetShardStats {
        static instance: ::protobuf::rt::LazyV2<GetShardStats> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetShardStats::new)
    }
}

impl ::protobuf::Clear for GetShardStats {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetShardStats {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetShardStats {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ShardStats {
    // message fields
    pub shard_id: u32,
    pub node_id: u64,
    pub entities: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ShardStats {
    fn default() -> &'a ShardStats {
        <ShardStats as ::protobuf::Message>::default_instance()
    }
}

impl ShardStats {
    pub fn new() -> ShardStats {
        ::std::default::Default::default()
    }

    // uint32 shard_id = 1;


    pub fn get_shard_id(&self) -> u32 {
        self.shard_id
    }
    pub fn clear_shard_id(&mut self) {
        self.shard_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_shard_id(&mut self, v: u32) {
        self.shard_id = v;
    }

    // uint64 node_id = 2;


    pub fn get_node_id(&self) -> u64 {
        self.node_id
    }
    pub fn clear_node_id(&mut self) {
        self.node_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_node_id(&mut self, v: u64) {
        self.node_id = v;
    }

    // repeated string entities = 3;


    pub fn get_entities(&self) -> &[::std::string::String] {
        &self.entities
    }
    pub fn clear_entities(&mut self) {
        self.entities.clear();
    }

    // Param is passed by value, moved
    pub fn set_entities(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.entities = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entities(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.entities
    }

    // Take field
    pub fn take_entities(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.entities, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ShardStats {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.shard_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.node_id = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.entities)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.shard_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.shard_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.node_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.node_id, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.entities {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.shard_id != 0 {
            os.write_uint32(1, self.shard_id)?;
        }
        if self.node_id != 0 {
            os.write_uint64(2, self.node_id)?;
        }
        for v in &self.entities {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ShardStats {
        ShardStats::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "shard_id",
                |m: &ShardStats| { &m.shard_id },
                |m: &mut ShardStats| { &mut m.shard_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "node_id",
                |m: &ShardStats| { &m.node_id },
                |m: &mut ShardStats| { &mut m.node_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "entities",
                |m: &ShardStats| { &m.entities },
                |m: &mut ShardStats| { &mut m.entities },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ShardStats>(
                "ShardStats",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ShardStats {
        static instance: ::protobuf::rt::LazyV2<ShardStats> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ShardStats::new)
    }
}

impl ::protobuf::Clear for ShardStats {
    fn clear(&mut self) {
        self.shard_id = 0;
        self.node_id = 0;
        self.entities.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ShardStats {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ShardStats {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EntityState {
    IDLE = 0,
    ACTIVE = 1,
    PASSIVATED = 2,
}

impl ::protobuf::ProtobufEnum for EntityState {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EntityState> {
        match value {
            0 => ::std::option::Option::Some(EntityState::IDLE),
            1 => ::std::option::Option::Some(EntityState::ACTIVE),
            2 => ::std::option::Option::Some(EntityState::PASSIVATED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EntityState] = &[
            EntityState::IDLE,
            EntityState::ACTIVE,
            EntityState::PASSIVATED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<EntityState>("EntityState", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for EntityState {
}

impl ::std::default::Default for EntityState {
    fn default() -> Self {
        EntityState::IDLE
    }
}

impl ::protobuf::reflect::ProtobufValue for EntityState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0esharding.proto\x12\x0fcoerce.sharding\"R\n\rAllocateShard\x12\x1b\
    \n\x08shard_id\x18\x01\x20\x01(\rR\x07shardIdB\0\x12\"\n\x0brebalancing\
    \x18\x02\x20\x01(\x08R\x0brebalancingB\0:\0\"G\n\x0bRemoteShard\x12\x1b\
    \n\x08shard_id\x18\x01\x20\x01(\rR\x07shardIdB\0\x12\x19\n\x07node_id\
    \x18\x02\x20\x01(\x04R\x06nodeIdB\0:\0\"H\n\x0eShardAllocated\x124\n\x05\
    shard\x18\x01\x20\x01(\x0b2\x1c.coerce.sharding.RemoteShardR\x05shardB\0\
    :\0\"2\n\x11ShardReallocating\x12\x1b\n\x08shard_id\x18\x01\x20\x01(\rR\
    \x07shardIdB\0:\0\"s\n\tStopShard\x12\x1b\n\x08shard_id\x18\x01\x20\x01(\
    \rR\x07shardIdB\0\x12&\n\x0eorigin_node_id\x18\x02\x20\x01(\x04R\x0corig\
    inNodeIdB\0\x12\x1f\n\nrequest_id\x18\x03\x20\x01(\tR\trequestIdB\0:\0\"\
    |\n\x0cShardStopped\x12\x1b\n\x08shard_id\x18\x01\x20\x01(\rR\x07shardId\
    B\0\x12&\n\x0eorigin_node_id\x18\x02\x20\x01(\x04R\x0coriginNodeIdB\0\
    \x12%\n\ris_successful\x18\x03\x20\x01(\x08R\x0cisSuccessfulB\0:\0\"\xf0\
    \x02\n\x13AllocateShardResult\x12L\n\x0bresult_type\x18\x01\x20\x01(\x0e\
    2).coerce.sharding.AllocateShardResult.TypeR\nresultTypeB\0\x12>\n\nallo\
    cation\x18\x02\x20\x01(\x0b2\x1c.coerce.sharding.RemoteShardR\nallocatio\
    nB\0\x12I\n\x03err\x18\x03\x20\x01(\x0e25.coerce.sharding.AllocateShardR\
    esult.AllocateShardErrR\x03errB\0\"J\n\x04Type\x12\r\n\tALLOCATED\x10\0\
    \x12\x15\n\x11ALREADY_ALLOCATED\x10\x01\x12\x11\n\rNOT_ALLOCATED\x10\x02\
    \x12\x07\n\x03ERR\x10\x03\x1a\0\"2\n\x10AllocateShardErr\x12\x0b\n\x07UN\
    KNOWN\x10\0\x12\x0f\n\x0bPERSISTENCE\x10\x01\x1a\0:\0\"\xa6\x02\n\x13Rem\
    oteEntityRequest\x12\x1f\n\nrequest_id\x18\x01\x20\x01(\tR\trequestIdB\0\
    \x12\x1b\n\x08actor_id\x18\x02\x20\x01(\tR\x07actorIdB\0\x12#\n\x0cmessa\
    ge_type\x18\x03\x20\x01(\tR\x0bmessageTypeB\0\x12\x1a\n\x07message\x18\
    \x04\x20\x01(\x0cR\x07messageB\0\x12E\n\x06recipe\x18\x05\x20\x01(\x0b2+\
    .coerce.sharding.RemoteEntityRequest.RecipeR\x06recipeB\0\x12!\n\x0borig\
    in_node\x18\x06\x20\x01(\x04R\noriginNodeB\0\x1a$\n\x06Recipe\x12\x18\n\
    \x06recipe\x18\x01\x20\x01(\x0cR\x06recipeB\0:\0:\0\"F\n\x0bStartEntity\
    \x12\x1b\n\x08actor_id\x18\x01\x20\x01(\tR\x07actorIdB\0\x12\x18\n\x06re\
    cipe\x18\x02\x20\x01(\x0cR\x06recipeB\0:\0\"0\n\x0fPassivateEntity\x12\
    \x1b\n\x08actor_id\x18\x01\x20\x01(\tR\x07actorIdB\0:\0\"-\n\x0cRemoveEn\
    tity\x12\x1b\n\x08actor_id\x18\x01\x20\x01(\tR\x07actorIdB\0:\0\"\x91\
    \x02\n\x12ShardStateSnapshot\x12\x1b\n\x08shard_id\x18\x01\x20\x01(\rR\
    \x07shardIdB\0\x12\x19\n\x07node_id\x18\x02\x20\x01(\x04R\x06nodeIdB\0\
    \x12H\n\x08entities\x18\x03\x20\x03(\x0b2*.coerce.sharding.ShardStateSna\
    pshot.EntityR\x08entitiesB\0\x1aw\n\x06Entity\x12\x1b\n\x08actor_id\x18\
    \x01\x20\x01(\tR\x07actorIdB\0\x12\x18\n\x06recipe\x18\x02\x20\x01(\x0cR\
    \x06recipeB\0\x124\n\x05state\x18\x03\x20\x01(\x0e2\x1c.coerce.sharding.\
    EntityStateR\x05stateB\0:\0:\0\"\x14\n\x10GetShardingStats:\0\"K\n\tNode\
    Stats\x12\x19\n\x07node_id\x18\x01\x20\x01(\x04R\x06nodeIdB\0\x12!\n\x0b\
    shard_count\x18\x02\x20\x01(\x04R\nshardCountB\0:\0\"\xc5\x01\n\rShardin\
    gStats\x12!\n\x0bentity_type\x18\x01\x20\x01(\tR\nentityTypeB\0\x12#\n\
    \x0ctotal_shards\x18\x02\x20\x01(\x04R\x0btotalShardsB\0\x126\n\x06shard\
    s\x18\x03\x20\x03(\x0b2\x1c.coerce.sharding.RemoteShardR\x06shardsB\0\
    \x122\n\x05nodes\x18\x04\x20\x03(\x0b2\x1a.coerce.sharding.NodeStatsR\
    \x05nodesB\0:\0\"\x11\n\rGetShardStats:\0\"d\n\nShardStats\x12\x1b\n\x08\
    shard_id\x18\x01\x20\x01(\rR\x07shardIdB\0\x12\x19\n\x07node_id\x18\x02\
    \x20\x01(\x04R\x06nodeIdB\0\x12\x1c\n\x08entities\x18\x03\x20\x03(\tR\
    \x08entitiesB\0:\0*5\n\x0bEntityState\x12\x08\n\x04IDLE\x10\0\x12\n\n\
    \x06ACTIVE\x10\x01\x12\x0e\n\nPASSIVATED\x10\x02\x1a\0B\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
